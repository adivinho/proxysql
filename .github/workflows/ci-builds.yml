name: CI-builds

on:
  workflow_dispatch:
  workflow_call:

concurrency:
  group: ci_builds-${{ github.sha }}
  cancel-in-progress: false

jobs:
  builds:
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - dist: 'centos6'
            type: ''
          - dist: 'centos7'
            type: ''
          - dist: 'fedora37'
            type: '-clang'
          - dist: 'ubuntu20'
            type: '-clang'
          - dist: 'ubuntu22'
            type: '-tap'
          - dist: 'ubuntu22'
            type: '-tap-ssl'
    steps:

    - name: Cache check
      id: cache-check
      uses: actions/cache/restore@v3
      with:
        key: CI-builds_${{ github.sha }}_ubuntu22-tap_matrix
        lookup-only: true
        path: |
          proxysql/tap-matrix.*

    - name: Checkout repository
      if: ${{ steps.cache-check.outputs.cache-hit != 'true' }}
      uses: actions/checkout@v3
      with:
        repository: 'sysown/proxysql'
#        ref: 'v2.x'
        fetch-depth: 0
        path: 'proxysql'

#    - name: Set GIT_VERSION
#      run: |
#        cd ${{ github.workspace }}/proxysql/
#        git fetch --tags --force
#        echo "GIT_VERSION=$(git describe --long --abbrev=7)" >> $GITHUB_ENV

    - name: Patch TAP-tests
      if: ${{ matrix.type == '-tap-ssl' }}
      run: |
        # apply patches
        #for PATCH in $(cd jenkins-build-scripts/test-scripts/patches; find . -type f); do
        #  if [[ $PATCH =~ \.patch ]]; then
        #    patch --verbose proxysql/${PATCH%.patch} jenkins-build-scripts/test-scripts/patches/${PATCH} || true
        #  elif [[ ! -f jenkins-build-scripts/test-scripts/patches/${PATCH#./}.patch ]]; then
        #    cp -v jenkins-build-scripts/test-scripts/patches/${PATCH#./} proxysql/${PATCH#./} || true
        #  fi
        #done
        
        # set CLIENT_SSL
        if [[ "${{ matrix.type }}" =~ "-tap-ssl" ]]; then
          cd proxysql/
          echo ">>> set CLIENT_SSL"
          for TAPCPP in test/tap/tests/*.cpp ; do
            echo ">>> $TAPCPP"
            perl -i -p0e 's/mysql_real_connect\(\s*\n*\s*^\{(.*)\n\s*(.*)\n\s*/mysql_real_connect($1$2/g' $TAPCPP
            #perl -i -p0e 's/mysql_real_connect\(\s*\n*\s*(.*)\n\s*(.*)\n\s*/mysql_real_connect($1$2/g' $TAPCPP
            sed -i "/mysql_real_connect(/s/NULL, 0)/NULL, CLIENT_SSL)/" $TAPCPP
            grep -nh "mysql_real_connect(" $TAPCPP || true
          done
        fi

    - name: Build
      id: build
      if: ${{ steps.cache-check.outputs.cache-hit != 'true' }}
      run: |
        cd proxysql/
        if [[ "${{ matrix.type }}" =~ "-tap-ssl" ]]; then
          # prebuild dependencies without debug
          sed -i "/command/c \    command: bash -l -c 'cd /opt/proxysql && make -j$(nproc) build_deps_clickhouse'" docker-compose.yml
          make ${{ matrix.dist }} | tee ../build-deps.log
          # build tap tests
          sed -i "s/^build_tap_test_debug: build_src_debug$/build_tap_test_debug: build_src_debug_clickhouse/" Makefile
          sed -i "/command/c \    command: bash -l -c 'cd /opt/proxysql && make -j$(nproc) build_tap_test_debug'" docker-compose.yml
          make ${{ matrix.dist }}-dbg | tee ../build-tap.log
          echo "[ "$(find test/tap/tests/ -type f -name '*-t' -executable -printf "'%f', ")" ]" > tap-matrix.json
          find test/tap/tests/ -type f -name '*-t' -executable -printf "%f\n" > tap-matrix.txt
        elif [[ "${{ matrix.type }}" =~ "-tap" ]]; then
          # prebuild dependencies without debug
          sed -i "/command/c \    command: bash -l -c 'cd /opt/proxysql && make -j$(nproc) build_deps_clickhouse'" docker-compose.yml
          make ${{ matrix.dist }} | tee ../build-deps.log
          # build tap tests
          sed -i "s/^build_tap_test_debug: build_src_debug$/build_tap_test_debug: build_src_debug_clickhouse/" Makefile
          sed -i "/command/c \    command: bash -l -c 'cd /opt/proxysql && make -j$(nproc) build_tap_test_debug'" docker-compose.yml
          make ${{ matrix.dist }}-dbg | tee ../build-tap.log
          echo "[ "$(find test/tap/tests/ -type f -name '*-t' -executable -printf "'%f', ")" ]" > tap-matrix.json
          find test/tap/tests/ -type f -name '*-t' -executable -printf "%f\n" > tap-matrix.txt
        elif [[ "${{ matrix.type }}" =~ "-test" ]]; then
          TYPE=${{ matrix.type }}
          # build TYPE
          sed -i "/command/c \    command: bash -l -c 'cd /opt/proxysql && make -j$(nproc) ${TYPE#-}'" docker-compose.yml
          make ${{ matrix.dist }} | tee ../build.log
        else
          make ${{ matrix.dist }}${{ matrix.type }} | tee ../build.log
        fi

    - name: Check build
      if: ${{ steps.cache-check.outputs.cache-hit != 'true' }}
      run: |
        for LOG in build*.log ; do
          grep 'exited with code 0' ${LOG} || exit 1
        done

    - name: Cache save src
      id: cache-save-src
      if: ${{ success() && steps.cache-check.outputs.cache-hit != 'true' && ( matrix.type == '-tap' || matrix.type == '-tap-ssl' ) }}
      uses: actions/cache/save@v3
      with:
        key: CI-builds_${{ github.sha }}_${{ matrix.dist }}${{ matrix.type }}_src
        path: |
          proxysql/src/

    - name: Cache save test
      id: cache-save-test
      if: ${{ success() && steps.cache-check.outputs.cache-hit != 'true' && ( matrix.type == '-tap' || matrix.type == '-tap-ssl' ) }}
      uses: actions/cache/save@v3
      with:
        key: CI-builds_${{ github.sha }}_${{ matrix.dist }}${{ matrix.type }}_test
        path: |
          proxysql/test/

    - name: Cache save matrix
      id: cache-save-matrix
      if: ${{ success() && steps.cache-check.outputs.cache-hit != 'true' && ( matrix.type == '-tap' || matrix.type == '-tap-ssl' ) }}
      uses: actions/cache/save@v3
      with:
        key: CI-builds_${{ github.sha }}_${{ matrix.dist }}${{ matrix.type }}_matrix
        path: |
          proxysql/tap-matrix.*
          
