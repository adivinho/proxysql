name: CI-builds

on:
  workflow_dispatch:
  workflow_call:

permissions: write-all

env:
  LOCK: CI_BUILDS_${{ github.sha }}

jobs:

  lock:
    runs-on: ubuntu-22.04
    env:
      GH_TOKEN: ${{ secrets.gh_token }}

    steps:

    - name: Concurency probe
      run: |
        # probe random times for lock to avoid race condition
        while [[ $(( $RANDOM % 60 )) -ne 0 ]]; do
          echo "Probing lock '${LOCK^^}' ..."
          PROBE="$(gh variable -R sysown/proxysql list | grep -i ${LOCK} || echo '')"
          if [[ -z ${PROBE} ]]; then
            echo "Already locked '${LOCK^^}' by '$(echo ${PROBE} | awk '{ print $2 }')'"
          #if [[ $(gh variable -R sysown/proxysql list | grep -i ${LOCK}) ]]; then
          #  echo "Already locked '${LOCK^^}' by '$(gh variable -R sysown/proxysql list | grep -i ${LOCK} | awk '{ print $2 }')'"
            break
          fi
          sleep 1
        done

    - name: Concurency lock
      run: |
        # wait for unlock otherwise lock
        if [[ $(gh variable -R sysown/proxysql list | grep -i ${LOCK}) ]]; then
          PROBE="$(gh variable -R sysown/proxysql list | grep -i ${LOCK} || echo '')"
          while [[ -z ${PROBE} ]]; do
            echo "Wating for unlock '${LOCK^^}' by '$(echo ${PROBE} | awk \"{ print $2 }\")'"
          #while [[ $(gh variable -R sysown/proxysql list | grep -i ${LOCK}) ]]; do
          #  echo "Wating for unlock '${LOCK^^}' by '$(gh variable -R sysown/proxysql list | grep -i ${LOCK} | awk '{ print $2 }')'"
            sleep $(( 5 + $RANDOM % 10 ))
            PROBE="$(gh variable -R sysown/proxysql list | grep -i ${LOCK} || echo '')"
          done
        else
          echo "Setting lock '${LOCK^^}' to '${{ github.workflow }}'"
          gh variable -R sysown/proxysql set ${LOCK} -b '${{ github.workflow }}'
        fi

  builds:
    runs-on: ubuntu-22.04
    needs: [ lock ]
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - dist: 'centos6'
            type: ''
          - dist: 'centos7'
            type: ''
          - dist: 'fedora37'
            type: '-clang'
          - dist: 'ubuntu20'
            type: '-clang'
          - dist: 'ubuntu22'
            type: '-tap'

    steps:

    - name: Cache check
      id: cache-check
      uses: actions/cache/restore@v3
      with:
        key: CI-builds_${{ github.sha }}_ubuntu22-tap_matrix
        lookup-only: true
        path: |
          proxysql/tap-matrix*

    - name: Checkout repository
      if: ${{ steps.cache-check.outputs.cache-hit != 'true' }}
      uses: actions/checkout@v3
      with:
#        repository: 'sysown/proxysql'
#        ref: 'v2.x'
        fetch-depth: 0
        path: 'proxysql'

#    - name: Set GIT_VERSION
#      run: |
#        cd ${{ github.workspace }}/proxysql/
#        git fetch --tags --force
#        echo "GIT_VERSION=$(git describe --long --abbrev=7)" >> $GITHUB_ENV

    - name: Patch TAP-tests
      if: ${{ steps.cache-check.outputs.cache-hit != 'true' }}
      run: |
        # apply patches
        #for PATCH in $(cd jenkins-build-scripts/test-scripts/patches && find . -type f); do
        #  if [[ $PATCH =~ \.patch ]]; then
        #    patch --verbose proxysql/${PATCH%.patch} jenkins-build-scripts/test-scripts/patches/${PATCH} || true
        #  elif [[ ! -f jenkins-build-scripts/test-scripts/patches/${PATCH#./}.patch ]]; then
        #    cp -v jenkins-build-scripts/test-scripts/patches/${PATCH#./} proxysql/${PATCH#./} || true
        #  fi
        #done
        #ls -l proxysql/test/tap

    - name: Build
      id: build
      if: ${{ steps.cache-check.outputs.cache-hit != 'true' }}
      run: |
        cd proxysql/
        mkdir ci_build_log
        if [[ "${{ matrix.type }}" =~ "-tap" ]]; then
          # prebuild dependencies without debug
          sed -i "/command/c \    command: bash -l -c 'apt install libncurses-dev pkg-config && cd /opt/proxysql && make -j$(nproc) build_deps_clickhouse'" docker-compose.yml
          make ${{ matrix.dist }} | tee ci_build_log/build-deps.log
          # build tap tests
          sed -i "s/^build_tap_test_debug: build_src_debug$/build_tap_test_debug: build_src_debug_clickhouse/" Makefile
          sed -i "/command/c \    command: bash -l -c 'apt install libncurses-dev pkg-config && cd /opt/proxysql && make -j$(nproc) build_tap_test_debug'" docker-compose.yml
          make ${{ matrix.dist }}-dbg | tee ci_build_log/build-tap.log
          
          for TESTS in test/tap/tests*; do
            echo "[ "$(find -L $TESTS -type f -name '*-t' -executable -printf "'%f', ")" ]" > tap-matrix-${TESTS##*/}.json
            find -L $TESTS -type f -name '*-t' -executable -printf "%f\n" > tap-matrix-${TESTS##*/}.txt
            echo "===================="
            echo ">>>${TESTS##*/}<<<"
            cat tap-matrix-${TESTS##*/}.txt
            echo "===================="
          done
          
        elif [[ "${{ matrix.type }}" =~ "-test" ]]; then
          TYPE=${{ matrix.type }}
          # build TYPE
          sed -i "/command/c \    command: bash -l -c 'cd /opt/proxysql && make -j$(nproc) ${TYPE#-}'" docker-compose.yml
          make ${{ matrix.dist }} | tee ci_build_log/build.log
        else
          make ${{ matrix.dist }}${{ matrix.type }} | tee ci_build_log/build.log
        fi

    - name: Check build
      if: ${{ steps.cache-check.outputs.cache-hit != 'true' }}
      run: |
        for LOG in proxysql/ci_build_log/build*.log ; do
          grep 'exited with code 0' ${LOG} || exit 1
        done

    - name: Cache save bin
      id: cache-save-bin
      if: ${{ success() && steps.cache-check.outputs.cache-hit != 'true' && matrix.type == '-tap' }}
      uses: actions/cache/save@v3
      with:
        key: CI-builds_${{ github.sha }}_${{ matrix.dist }}${{ matrix.type }}_bin
        path: |
          proxysql/binaries/

    - name: Cache save src
      id: cache-save-src
      if: ${{ success() && steps.cache-check.outputs.cache-hit != 'true' && matrix.type == '-tap' }}
      uses: actions/cache/save@v3
      with:
        key: CI-builds_${{ github.sha }}_${{ matrix.dist }}${{ matrix.type }}_src
        path: |
          proxysql/src/

    - name: Cache save test
      id: cache-save-test
      if: ${{ success() && steps.cache-check.outputs.cache-hit != 'true' && matrix.type == '-tap' }}
      uses: actions/cache/save@v3
      with:
        key: CI-builds_${{ github.sha }}_${{ matrix.dist }}${{ matrix.type }}_test
        path: |
          proxysql/test/

    - name: Cache save matrix
      id: cache-save-matrix
      if: ${{ success() && steps.cache-check.outputs.cache-hit != 'true' && matrix.type == '-tap' }}
      uses: actions/cache/save@v3
      with:
        key: CI-builds_${{ github.sha }}_${{ matrix.dist }}${{ matrix.type }}_matrix
        path: |
          proxysql/tap-matrix*

    - name: Archive artifacts
      if: ${{ failure() }}
      uses: actions/upload-artifact@v3
      with:
        name: ci-builds-${{ github.sha }}-run#${{ github.run_number }}
        path: |
          proxysql/

  unlock:
    runs-on: ubuntu-22.04
    needs: [ builds ]
    env:
      GH_TOKEN: ${{ secrets.gh_token }}

    steps:
    
    - name: Concurency unlock
      run: |
        # delete lock
        echo "Releasing lock '${LOCK}'"
        gh variable -R sysown/proxysql delete ${LOCK} || true

